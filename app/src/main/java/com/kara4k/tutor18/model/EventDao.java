package com.kara4k.tutor18.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "events".
*/
public class EventDao extends AbstractDao<Event, Long> {

    public static final String TABLENAME = "events";

    /**
     * Properties of entity Event.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PersonId = new Property(1, Long.class, "personId", false, "PERSON_ID");
        public final static Property LessonId = new Property(2, Long.class, "lessonId", false, "LESSON_ID");
        public final static Property Date = new Property(3, Long.class, "date", false, "DATE");
        public final static Property IsHeld = new Property(4, int.class, "isHeld", false, "IS_HELD");
        public final static Property RescheduledToId = new Property(5, Long.class, "rescheduledToId", false, "RESCHEDULED_TO_ID");
        public final static Property IsPayment = new Property(6, boolean.class, "isPayment", false, "IS_PAYMENT");
        public final static Property IsPaid = new Property(7, boolean.class, "isPaid", false, "IS_PAID");
        public final static Property Subjects = new Property(8, String.class, "subjects", false, "SUBJECTS");
        public final static Property Note = new Property(9, String.class, "note", false, "NOTE");
    }

    private DaoSession daoSession;


    public EventDao(DaoConfig config) {
        super(config);
    }
    
    public EventDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"events\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PERSON_ID\" INTEGER," + // 1: personId
                "\"LESSON_ID\" INTEGER," + // 2: lessonId
                "\"DATE\" INTEGER," + // 3: date
                "\"IS_HELD\" INTEGER NOT NULL ," + // 4: isHeld
                "\"RESCHEDULED_TO_ID\" INTEGER," + // 5: rescheduledToId
                "\"IS_PAYMENT\" INTEGER NOT NULL ," + // 6: isPayment
                "\"IS_PAID\" INTEGER NOT NULL ," + // 7: isPaid
                "\"SUBJECTS\" TEXT," + // 8: subjects
                "\"NOTE\" TEXT);"); // 9: note
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"events\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Event entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindLong(2, personId);
        }
 
        Long lessonId = entity.getLessonId();
        if (lessonId != null) {
            stmt.bindLong(3, lessonId);
        }
 
        Long date = entity.getDate();
        if (date != null) {
            stmt.bindLong(4, date);
        }
        stmt.bindLong(5, entity.getIsHeld());
 
        Long rescheduledToId = entity.getRescheduledToId();
        if (rescheduledToId != null) {
            stmt.bindLong(6, rescheduledToId);
        }
        stmt.bindLong(7, entity.getIsPayment() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsPaid() ? 1L: 0L);
 
        String subjects = entity.getSubjects();
        if (subjects != null) {
            stmt.bindString(9, subjects);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(10, note);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Event entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindLong(2, personId);
        }
 
        Long lessonId = entity.getLessonId();
        if (lessonId != null) {
            stmt.bindLong(3, lessonId);
        }
 
        Long date = entity.getDate();
        if (date != null) {
            stmt.bindLong(4, date);
        }
        stmt.bindLong(5, entity.getIsHeld());
 
        Long rescheduledToId = entity.getRescheduledToId();
        if (rescheduledToId != null) {
            stmt.bindLong(6, rescheduledToId);
        }
        stmt.bindLong(7, entity.getIsPayment() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsPaid() ? 1L: 0L);
 
        String subjects = entity.getSubjects();
        if (subjects != null) {
            stmt.bindString(9, subjects);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(10, note);
        }
    }

    @Override
    protected final void attachEntity(Event entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Event readEntity(Cursor cursor, int offset) {
        Event entity = new Event( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // personId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // lessonId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // date
            cursor.getInt(offset + 4), // isHeld
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // rescheduledToId
            cursor.getShort(offset + 6) != 0, // isPayment
            cursor.getShort(offset + 7) != 0, // isPaid
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // subjects
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // note
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Event entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPersonId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setLessonId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setIsHeld(cursor.getInt(offset + 4));
        entity.setRescheduledToId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setIsPayment(cursor.getShort(offset + 6) != 0);
        entity.setIsPaid(cursor.getShort(offset + 7) != 0);
        entity.setSubjects(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNote(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Event entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Event entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Event entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
