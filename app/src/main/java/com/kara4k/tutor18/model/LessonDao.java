package com.kara4k.tutor18.model;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "lessons".
*/
public class LessonDao extends AbstractDao<Lesson, Long> {

    public static final String TABLENAME = "lessons";

    /**
     * Properties of entity Lesson.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PersonId = new Property(1, Long.class, "personId", false, "PERSON_ID");
        public final static Property DayOfWeek = new Property(2, int.class, "dayOfWeek", false, "DAY_OF_WEEK");
        public final static Property StartHour = new Property(3, int.class, "startHour", false, "START_HOUR");
        public final static Property StartMin = new Property(4, int.class, "startMin", false, "START_MIN");
        public final static Property Duration = new Property(5, int.class, "duration", false, "DURATION");
        public final static Property Price = new Property(6, double.class, "price", false, "PRICE");
    }

    private DaoSession daoSession;

    private Query<Lesson> person_LessonsQuery;

    public LessonDao(DaoConfig config) {
        super(config);
    }
    
    public LessonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"lessons\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PERSON_ID\" INTEGER," + // 1: personId
                "\"DAY_OF_WEEK\" INTEGER NOT NULL ," + // 2: dayOfWeek
                "\"START_HOUR\" INTEGER NOT NULL ," + // 3: startHour
                "\"START_MIN\" INTEGER NOT NULL ," + // 4: startMin
                "\"DURATION\" INTEGER NOT NULL ," + // 5: duration
                "\"PRICE\" REAL NOT NULL );"); // 6: price
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"lessons\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Lesson entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindLong(2, personId);
        }
        stmt.bindLong(3, entity.getDayOfWeek());
        stmt.bindLong(4, entity.getStartHour());
        stmt.bindLong(5, entity.getStartMin());
        stmt.bindLong(6, entity.getDuration());
        stmt.bindDouble(7, entity.getPrice());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Lesson entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindLong(2, personId);
        }
        stmt.bindLong(3, entity.getDayOfWeek());
        stmt.bindLong(4, entity.getStartHour());
        stmt.bindLong(5, entity.getStartMin());
        stmt.bindLong(6, entity.getDuration());
        stmt.bindDouble(7, entity.getPrice());
    }

    @Override
    protected final void attachEntity(Lesson entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Lesson readEntity(Cursor cursor, int offset) {
        Lesson entity = new Lesson( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // personId
            cursor.getInt(offset + 2), // dayOfWeek
            cursor.getInt(offset + 3), // startHour
            cursor.getInt(offset + 4), // startMin
            cursor.getInt(offset + 5), // duration
            cursor.getDouble(offset + 6) // price
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Lesson entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPersonId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setDayOfWeek(cursor.getInt(offset + 2));
        entity.setStartHour(cursor.getInt(offset + 3));
        entity.setStartMin(cursor.getInt(offset + 4));
        entity.setDuration(cursor.getInt(offset + 5));
        entity.setPrice(cursor.getDouble(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Lesson entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Lesson entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Lesson entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "lessons" to-many relationship of Person. */
    public List<Lesson> _queryPerson_Lessons(Long personId) {
        synchronized (this) {
            if (person_LessonsQuery == null) {
                QueryBuilder<Lesson> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PersonId.eq(null));
                queryBuilder.orderRaw("T.'DAY_OF_WEEK' ASC");
                person_LessonsQuery = queryBuilder.build();
            }
        }
        Query<Lesson> query = person_LessonsQuery.forCurrentThread();
        query.setParameter(0, personId);
        return query.list();
    }

}
